/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.remote.DownloadItem', null, global);
goog.exportSymbol('proto.pb.remote.EngineState', null, global);
goog.exportSymbol('proto.pb.remote.GlobalSearchStatus', null, global);
goog.exportSymbol('proto.pb.remote.Lyric', null, global);
goog.exportSymbol('proto.pb.remote.Message', null, global);
goog.exportSymbol('proto.pb.remote.MsgType', null, global);
goog.exportSymbol('proto.pb.remote.Playlist', null, global);
goog.exportSymbol('proto.pb.remote.ReasonDisconnect', null, global);
goog.exportSymbol('proto.pb.remote.Repeat', null, global);
goog.exportSymbol('proto.pb.remote.RepeatMode', null, global);
goog.exportSymbol('proto.pb.remote.RequestChangeSong', null, global);
goog.exportSymbol('proto.pb.remote.RequestClosePlaylist', null, global);
goog.exportSymbol('proto.pb.remote.RequestConnect', null, global);
goog.exportSymbol('proto.pb.remote.RequestDownloadSongs', null, global);
goog.exportSymbol('proto.pb.remote.RequestGlobalSearch', null, global);
goog.exportSymbol('proto.pb.remote.RequestInsertUrls', null, global);
goog.exportSymbol('proto.pb.remote.RequestOpenPlaylist', null, global);
goog.exportSymbol('proto.pb.remote.RequestPlaylistSongs', null, global);
goog.exportSymbol('proto.pb.remote.RequestPlaylists', null, global);
goog.exportSymbol('proto.pb.remote.RequestRateSong', null, global);
goog.exportSymbol('proto.pb.remote.RequestRemoveSongs', null, global);
goog.exportSymbol('proto.pb.remote.RequestSetTrackPosition', null, global);
goog.exportSymbol('proto.pb.remote.RequestSetVolume', null, global);
goog.exportSymbol('proto.pb.remote.ResponseActiveChanged', null, global);
goog.exportSymbol('proto.pb.remote.ResponseClementineInfo', null, global);
goog.exportSymbol('proto.pb.remote.ResponseCurrentMetadata', null, global);
goog.exportSymbol('proto.pb.remote.ResponseDisconnect', null, global);
goog.exportSymbol('proto.pb.remote.ResponseDownloadTotalSize', null, global);
goog.exportSymbol('proto.pb.remote.ResponseEngineStateChanged', null, global);
goog.exportSymbol('proto.pb.remote.ResponseGlobalSearch', null, global);
goog.exportSymbol('proto.pb.remote.ResponseGlobalSearchStatus', null, global);
goog.exportSymbol('proto.pb.remote.ResponseLibraryChunk', null, global);
goog.exportSymbol('proto.pb.remote.ResponseLyrics', null, global);
goog.exportSymbol('proto.pb.remote.ResponsePlaylistSongs', null, global);
goog.exportSymbol('proto.pb.remote.ResponsePlaylists', null, global);
goog.exportSymbol('proto.pb.remote.ResponseSongFileChunk', null, global);
goog.exportSymbol('proto.pb.remote.ResponseSongOffer', null, global);
goog.exportSymbol('proto.pb.remote.ResponseTranscoderStatus', null, global);
goog.exportSymbol('proto.pb.remote.ResponseUpdateTrackPosition', null, global);
goog.exportSymbol('proto.pb.remote.Shuffle', null, global);
goog.exportSymbol('proto.pb.remote.ShuffleMode', null, global);
goog.exportSymbol('proto.pb.remote.SongMetadata', null, global);
goog.exportSymbol('proto.pb.remote.SongMetadata.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.SongMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.SongMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.SongMetadata.displayName = 'proto.pb.remote.SongMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.SongMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.SongMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.SongMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.SongMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    index: jspb.Message.getField(msg, 2),
    title: jspb.Message.getField(msg, 3),
    album: jspb.Message.getField(msg, 4),
    artist: jspb.Message.getField(msg, 5),
    albumartist: jspb.Message.getField(msg, 6),
    track: jspb.Message.getField(msg, 7),
    disc: jspb.Message.getField(msg, 8),
    prettyYear: jspb.Message.getField(msg, 9),
    genre: jspb.Message.getField(msg, 10),
    playcount: jspb.Message.getField(msg, 11),
    prettyLength: jspb.Message.getField(msg, 12),
    art: msg.getArt_asB64(),
    length: jspb.Message.getField(msg, 14),
    isLocal: jspb.Message.getField(msg, 15),
    filename: jspb.Message.getField(msg, 16),
    fileSize: jspb.Message.getField(msg, 17),
    rating: jspb.Message.getOptionalFloatingPointField(msg, 18),
    url: jspb.Message.getField(msg, 19),
    artAutomatic: jspb.Message.getField(msg, 20),
    artManual: jspb.Message.getField(msg, 21),
    type: jspb.Message.getField(msg, 22)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.SongMetadata}
 */
proto.pb.remote.SongMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.SongMetadata;
  return proto.pb.remote.SongMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.SongMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.SongMetadata}
 */
proto.pb.remote.SongMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlbum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtist(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlbumartist(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrack(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisc(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrettyYear(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGenre(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaycount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrettyLength(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArt(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLocal(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFileSize(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRating(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtAutomatic(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtManual(value);
      break;
    case 22:
      var value = /** @type {!proto.pb.remote.SongMetadata.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.SongMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.SongMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.SongMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.SongMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = /** @type {!proto.pb.remote.SongMetadata.Type} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeEnum(
      22,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.remote.SongMetadata.Type = {
  UNKNOWN: 0,
  ASF: 1,
  FLAC: 2,
  MP4: 3,
  MPC: 4,
  MPEG: 5,
  OGGFLAC: 6,
  OGGSPEEX: 7,
  OGGVORBIS: 8,
  AIFF: 9,
  WAV: 10,
  TRUEAUDIO: 11,
  CDDA: 12,
  OGGOPUS: 13,
  STREAM: 99
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.SongMetadata.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.SongMetadata.prototype.clearIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.SongMetadata.prototype.clearTitle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string album = 4;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getAlbum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setAlbum = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.pb.remote.SongMetadata.prototype.clearAlbum = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasAlbum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string artist = 5;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getArtist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setArtist = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.pb.remote.SongMetadata.prototype.clearArtist = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasArtist = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string albumartist = 6;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getAlbumartist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setAlbumartist = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.pb.remote.SongMetadata.prototype.clearAlbumartist = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasAlbumartist = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 track = 7;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getTrack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setTrack = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.pb.remote.SongMetadata.prototype.clearTrack = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasTrack = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 disc = 8;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getDisc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setDisc = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.pb.remote.SongMetadata.prototype.clearDisc = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasDisc = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string pretty_year = 9;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getPrettyYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setPrettyYear = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.pb.remote.SongMetadata.prototype.clearPrettyYear = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasPrettyYear = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string genre = 10;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getGenre = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setGenre = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.pb.remote.SongMetadata.prototype.clearGenre = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasGenre = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 playcount = 11;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getPlaycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setPlaycount = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.pb.remote.SongMetadata.prototype.clearPlaycount = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasPlaycount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string pretty_length = 12;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getPrettyLength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setPrettyLength = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.pb.remote.SongMetadata.prototype.clearPrettyLength = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasPrettyLength = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes art = 13;
 * @return {!(string|Uint8Array)}
 */
proto.pb.remote.SongMetadata.prototype.getArt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes art = 13;
 * This is a type-conversion wrapper around `getArt()`
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getArt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArt()));
};


/**
 * optional bytes art = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArt()`
 * @return {!Uint8Array}
 */
proto.pb.remote.SongMetadata.prototype.getArt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArt()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.remote.SongMetadata.prototype.setArt = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.pb.remote.SongMetadata.prototype.clearArt = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasArt = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 length = 14;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setLength = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.pb.remote.SongMetadata.prototype.clearLength = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasLength = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool is_local = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.SongMetadata.prototype.getIsLocal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.pb.remote.SongMetadata.prototype.setIsLocal = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.pb.remote.SongMetadata.prototype.clearIsLocal = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasIsLocal = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string filename = 16;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.pb.remote.SongMetadata.prototype.clearFilename = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasFilename = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 file_size = 17;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.pb.remote.SongMetadata.prototype.clearFileSize = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasFileSize = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional float rating = 18;
 * @return {number}
 */
proto.pb.remote.SongMetadata.prototype.getRating = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.pb.remote.SongMetadata.prototype.setRating = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.pb.remote.SongMetadata.prototype.clearRating = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasRating = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string url = 19;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.pb.remote.SongMetadata.prototype.clearUrl = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string art_automatic = 20;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getArtAutomatic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setArtAutomatic = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.pb.remote.SongMetadata.prototype.clearArtAutomatic = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasArtAutomatic = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string art_manual = 21;
 * @return {string}
 */
proto.pb.remote.SongMetadata.prototype.getArtManual = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.pb.remote.SongMetadata.prototype.setArtManual = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.pb.remote.SongMetadata.prototype.clearArtManual = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasArtManual = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Type type = 22;
 * @return {!proto.pb.remote.SongMetadata.Type}
 */
proto.pb.remote.SongMetadata.prototype.getType = function() {
  return /** @type {!proto.pb.remote.SongMetadata.Type} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {!proto.pb.remote.SongMetadata.Type} value */
proto.pb.remote.SongMetadata.prototype.setType = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.pb.remote.SongMetadata.prototype.clearType = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.SongMetadata.prototype.hasType = function() {
  return jspb.Message.getField(this, 22) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.Playlist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.Playlist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.Playlist.displayName = 'proto.pb.remote.Playlist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.Playlist.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.Playlist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.Playlist} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.Playlist.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    itemCount: jspb.Message.getField(msg, 3),
    active: jspb.Message.getField(msg, 4),
    closed: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.Playlist}
 */
proto.pb.remote.Playlist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.Playlist;
  return proto.pb.remote.Playlist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.Playlist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.Playlist}
 */
proto.pb.remote.Playlist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemCount(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClosed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.Playlist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.Playlist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.Playlist} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.Playlist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.remote.Playlist.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.Playlist.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.Playlist.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Playlist.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.remote.Playlist.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.remote.Playlist.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.Playlist.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Playlist.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 item_count = 3;
 * @return {number}
 */
proto.pb.remote.Playlist.prototype.getItemCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.remote.Playlist.prototype.setItemCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.Playlist.prototype.clearItemCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Playlist.prototype.hasItemCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool active = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.Playlist.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.pb.remote.Playlist.prototype.setActive = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.pb.remote.Playlist.prototype.clearActive = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Playlist.prototype.hasActive = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool closed = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.Playlist.prototype.getClosed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.pb.remote.Playlist.prototype.setClosed = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.pb.remote.Playlist.prototype.clearClosed = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Playlist.prototype.hasClosed = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestPlaylists = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestPlaylists, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestPlaylists.displayName = 'proto.pb.remote.RequestPlaylists';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestPlaylists.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestPlaylists.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestPlaylists} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestPlaylists.toObject = function(includeInstance, msg) {
  var f, obj = {
    includeClosed: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestPlaylists}
 */
proto.pb.remote.RequestPlaylists.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestPlaylists;
  return proto.pb.remote.RequestPlaylists.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestPlaylists} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestPlaylists}
 */
proto.pb.remote.RequestPlaylists.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeClosed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestPlaylists.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestPlaylists.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestPlaylists} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestPlaylists.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool include_closed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.RequestPlaylists.prototype.getIncludeClosed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pb.remote.RequestPlaylists.prototype.setIncludeClosed = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestPlaylists.prototype.clearIncludeClosed = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestPlaylists.prototype.hasIncludeClosed = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestPlaylistSongs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestPlaylistSongs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestPlaylistSongs.displayName = 'proto.pb.remote.RequestPlaylistSongs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestPlaylistSongs.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestPlaylistSongs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestPlaylistSongs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestPlaylistSongs.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestPlaylistSongs}
 */
proto.pb.remote.RequestPlaylistSongs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestPlaylistSongs;
  return proto.pb.remote.RequestPlaylistSongs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestPlaylistSongs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestPlaylistSongs}
 */
proto.pb.remote.RequestPlaylistSongs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestPlaylistSongs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestPlaylistSongs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestPlaylistSongs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestPlaylistSongs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.remote.RequestPlaylistSongs.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestPlaylistSongs.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestPlaylistSongs.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestPlaylistSongs.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestChangeSong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestChangeSong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestChangeSong.displayName = 'proto.pb.remote.RequestChangeSong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestChangeSong.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestChangeSong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestChangeSong} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestChangeSong.toObject = function(includeInstance, msg) {
  var f, obj = {
    playlistId: jspb.Message.getField(msg, 1),
    songIndex: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestChangeSong}
 */
proto.pb.remote.RequestChangeSong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestChangeSong;
  return proto.pb.remote.RequestChangeSong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestChangeSong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestChangeSong}
 */
proto.pb.remote.RequestChangeSong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaylistId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSongIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestChangeSong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestChangeSong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestChangeSong} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestChangeSong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 playlist_id = 1;
 * @return {number}
 */
proto.pb.remote.RequestChangeSong.prototype.getPlaylistId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestChangeSong.prototype.setPlaylistId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestChangeSong.prototype.clearPlaylistId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestChangeSong.prototype.hasPlaylistId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 song_index = 2;
 * @return {number}
 */
proto.pb.remote.RequestChangeSong.prototype.getSongIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.remote.RequestChangeSong.prototype.setSongIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.RequestChangeSong.prototype.clearSongIndex = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestChangeSong.prototype.hasSongIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestSetVolume = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestSetVolume, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestSetVolume.displayName = 'proto.pb.remote.RequestSetVolume';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestSetVolume.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestSetVolume.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestSetVolume} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestSetVolume.toObject = function(includeInstance, msg) {
  var f, obj = {
    volume: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestSetVolume}
 */
proto.pb.remote.RequestSetVolume.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestSetVolume;
  return proto.pb.remote.RequestSetVolume.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestSetVolume} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestSetVolume}
 */
proto.pb.remote.RequestSetVolume.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestSetVolume.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestSetVolume.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestSetVolume} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestSetVolume.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 volume = 1;
 * @return {number}
 */
proto.pb.remote.RequestSetVolume.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestSetVolume.prototype.setVolume = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestSetVolume.prototype.clearVolume = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestSetVolume.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.Repeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.Repeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.Repeat.displayName = 'proto.pb.remote.Repeat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.Repeat.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.Repeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.Repeat} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.Repeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    repeatMode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.Repeat}
 */
proto.pb.remote.Repeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.Repeat;
  return proto.pb.remote.Repeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.Repeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.Repeat}
 */
proto.pb.remote.Repeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.remote.RepeatMode} */ (reader.readEnum());
      msg.setRepeatMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.Repeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.Repeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.Repeat} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.Repeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.pb.remote.RepeatMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional RepeatMode repeat_mode = 1;
 * @return {!proto.pb.remote.RepeatMode}
 */
proto.pb.remote.Repeat.prototype.getRepeatMode = function() {
  return /** @type {!proto.pb.remote.RepeatMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.remote.RepeatMode} value */
proto.pb.remote.Repeat.prototype.setRepeatMode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.Repeat.prototype.clearRepeatMode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Repeat.prototype.hasRepeatMode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.Shuffle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.Shuffle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.Shuffle.displayName = 'proto.pb.remote.Shuffle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.Shuffle.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.Shuffle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.Shuffle} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.Shuffle.toObject = function(includeInstance, msg) {
  var f, obj = {
    shuffleMode: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.Shuffle}
 */
proto.pb.remote.Shuffle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.Shuffle;
  return proto.pb.remote.Shuffle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.Shuffle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.Shuffle}
 */
proto.pb.remote.Shuffle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.remote.ShuffleMode} */ (reader.readEnum());
      msg.setShuffleMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.Shuffle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.Shuffle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.Shuffle} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.Shuffle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.pb.remote.ShuffleMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ShuffleMode shuffle_mode = 1;
 * @return {!proto.pb.remote.ShuffleMode}
 */
proto.pb.remote.Shuffle.prototype.getShuffleMode = function() {
  return /** @type {!proto.pb.remote.ShuffleMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.remote.ShuffleMode} value */
proto.pb.remote.Shuffle.prototype.setShuffleMode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.Shuffle.prototype.clearShuffleMode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Shuffle.prototype.hasShuffleMode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseClementineInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseClementineInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseClementineInfo.displayName = 'proto.pb.remote.ResponseClementineInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseClementineInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseClementineInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseClementineInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseClementineInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getField(msg, 1),
    state: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseClementineInfo}
 */
proto.pb.remote.ResponseClementineInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseClementineInfo;
  return proto.pb.remote.ResponseClementineInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseClementineInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseClementineInfo}
 */
proto.pb.remote.ResponseClementineInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.remote.EngineState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseClementineInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseClementineInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseClementineInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseClementineInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.pb.remote.EngineState} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.pb.remote.ResponseClementineInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.remote.ResponseClementineInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseClementineInfo.prototype.clearVersion = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseClementineInfo.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EngineState state = 2;
 * @return {!proto.pb.remote.EngineState}
 */
proto.pb.remote.ResponseClementineInfo.prototype.getState = function() {
  return /** @type {!proto.pb.remote.EngineState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.pb.remote.EngineState} value */
proto.pb.remote.ResponseClementineInfo.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.ResponseClementineInfo.prototype.clearState = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseClementineInfo.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseCurrentMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseCurrentMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseCurrentMetadata.displayName = 'proto.pb.remote.ResponseCurrentMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseCurrentMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseCurrentMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseCurrentMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseCurrentMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    songMetadata: (f = msg.getSongMetadata()) && proto.pb.remote.SongMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseCurrentMetadata}
 */
proto.pb.remote.ResponseCurrentMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseCurrentMetadata;
  return proto.pb.remote.ResponseCurrentMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseCurrentMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseCurrentMetadata}
 */
proto.pb.remote.ResponseCurrentMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.remote.SongMetadata;
      reader.readMessage(value,proto.pb.remote.SongMetadata.deserializeBinaryFromReader);
      msg.setSongMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseCurrentMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseCurrentMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseCurrentMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseCurrentMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.remote.SongMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional SongMetadata song_metadata = 1;
 * @return {?proto.pb.remote.SongMetadata}
 */
proto.pb.remote.ResponseCurrentMetadata.prototype.getSongMetadata = function() {
  return /** @type{?proto.pb.remote.SongMetadata} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.SongMetadata, 1));
};


/** @param {?proto.pb.remote.SongMetadata|undefined} value */
proto.pb.remote.ResponseCurrentMetadata.prototype.setSongMetadata = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pb.remote.ResponseCurrentMetadata.prototype.clearSongMetadata = function() {
  this.setSongMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseCurrentMetadata.prototype.hasSongMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponsePlaylists = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.remote.ResponsePlaylists.repeatedFields_, null);
};
goog.inherits(proto.pb.remote.ResponsePlaylists, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponsePlaylists.displayName = 'proto.pb.remote.ResponsePlaylists';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.remote.ResponsePlaylists.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponsePlaylists.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponsePlaylists.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponsePlaylists} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponsePlaylists.toObject = function(includeInstance, msg) {
  var f, obj = {
    playlistList: jspb.Message.toObjectList(msg.getPlaylistList(),
    proto.pb.remote.Playlist.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponsePlaylists}
 */
proto.pb.remote.ResponsePlaylists.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponsePlaylists;
  return proto.pb.remote.ResponsePlaylists.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponsePlaylists} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponsePlaylists}
 */
proto.pb.remote.ResponsePlaylists.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.remote.Playlist;
      reader.readMessage(value,proto.pb.remote.Playlist.deserializeBinaryFromReader);
      msg.addPlaylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponsePlaylists.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponsePlaylists.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponsePlaylists} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponsePlaylists.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.remote.Playlist.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Playlist playlist = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb.remote.Playlist>}
 */
proto.pb.remote.ResponsePlaylists.prototype.getPlaylistList = function() {
  return /** @type{!Array.<!proto.pb.remote.Playlist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.remote.Playlist, 1));
};


/** @param {!Array.<!proto.pb.remote.Playlist>} value */
proto.pb.remote.ResponsePlaylists.prototype.setPlaylistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.remote.Playlist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.remote.Playlist}
 */
proto.pb.remote.ResponsePlaylists.prototype.addPlaylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.remote.Playlist, opt_index);
};


proto.pb.remote.ResponsePlaylists.prototype.clearPlaylistList = function() {
  this.setPlaylistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponsePlaylistSongs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.remote.ResponsePlaylistSongs.repeatedFields_, null);
};
goog.inherits(proto.pb.remote.ResponsePlaylistSongs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponsePlaylistSongs.displayName = 'proto.pb.remote.ResponsePlaylistSongs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.remote.ResponsePlaylistSongs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponsePlaylistSongs.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponsePlaylistSongs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponsePlaylistSongs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponsePlaylistSongs.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestedPlaylist: (f = msg.getRequestedPlaylist()) && proto.pb.remote.Playlist.toObject(includeInstance, f),
    songsList: jspb.Message.toObjectList(msg.getSongsList(),
    proto.pb.remote.SongMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponsePlaylistSongs}
 */
proto.pb.remote.ResponsePlaylistSongs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponsePlaylistSongs;
  return proto.pb.remote.ResponsePlaylistSongs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponsePlaylistSongs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponsePlaylistSongs}
 */
proto.pb.remote.ResponsePlaylistSongs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.remote.Playlist;
      reader.readMessage(value,proto.pb.remote.Playlist.deserializeBinaryFromReader);
      msg.setRequestedPlaylist(value);
      break;
    case 2:
      var value = new proto.pb.remote.SongMetadata;
      reader.readMessage(value,proto.pb.remote.SongMetadata.deserializeBinaryFromReader);
      msg.addSongs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponsePlaylistSongs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponsePlaylistSongs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponsePlaylistSongs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponsePlaylistSongs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestedPlaylist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.remote.Playlist.serializeBinaryToWriter
    );
  }
  f = message.getSongsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pb.remote.SongMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional Playlist requested_playlist = 1;
 * @return {?proto.pb.remote.Playlist}
 */
proto.pb.remote.ResponsePlaylistSongs.prototype.getRequestedPlaylist = function() {
  return /** @type{?proto.pb.remote.Playlist} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.Playlist, 1));
};


/** @param {?proto.pb.remote.Playlist|undefined} value */
proto.pb.remote.ResponsePlaylistSongs.prototype.setRequestedPlaylist = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pb.remote.ResponsePlaylistSongs.prototype.clearRequestedPlaylist = function() {
  this.setRequestedPlaylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponsePlaylistSongs.prototype.hasRequestedPlaylist = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SongMetadata songs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb.remote.SongMetadata>}
 */
proto.pb.remote.ResponsePlaylistSongs.prototype.getSongsList = function() {
  return /** @type{!Array.<!proto.pb.remote.SongMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.remote.SongMetadata, 2));
};


/** @param {!Array.<!proto.pb.remote.SongMetadata>} value */
proto.pb.remote.ResponsePlaylistSongs.prototype.setSongsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.remote.SongMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.remote.SongMetadata}
 */
proto.pb.remote.ResponsePlaylistSongs.prototype.addSongs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.remote.SongMetadata, opt_index);
};


proto.pb.remote.ResponsePlaylistSongs.prototype.clearSongsList = function() {
  this.setSongsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseEngineStateChanged = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseEngineStateChanged, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseEngineStateChanged.displayName = 'proto.pb.remote.ResponseEngineStateChanged';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseEngineStateChanged.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseEngineStateChanged.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseEngineStateChanged} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseEngineStateChanged.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseEngineStateChanged}
 */
proto.pb.remote.ResponseEngineStateChanged.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseEngineStateChanged;
  return proto.pb.remote.ResponseEngineStateChanged.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseEngineStateChanged} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseEngineStateChanged}
 */
proto.pb.remote.ResponseEngineStateChanged.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.remote.EngineState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseEngineStateChanged.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseEngineStateChanged.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseEngineStateChanged} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseEngineStateChanged.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.pb.remote.EngineState} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional EngineState state = 1;
 * @return {!proto.pb.remote.EngineState}
 */
proto.pb.remote.ResponseEngineStateChanged.prototype.getState = function() {
  return /** @type {!proto.pb.remote.EngineState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pb.remote.EngineState} value */
proto.pb.remote.ResponseEngineStateChanged.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseEngineStateChanged.prototype.clearState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseEngineStateChanged.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseUpdateTrackPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseUpdateTrackPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseUpdateTrackPosition.displayName = 'proto.pb.remote.ResponseUpdateTrackPosition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseUpdateTrackPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseUpdateTrackPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseUpdateTrackPosition} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseUpdateTrackPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseUpdateTrackPosition}
 */
proto.pb.remote.ResponseUpdateTrackPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseUpdateTrackPosition;
  return proto.pb.remote.ResponseUpdateTrackPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseUpdateTrackPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseUpdateTrackPosition}
 */
proto.pb.remote.ResponseUpdateTrackPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseUpdateTrackPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseUpdateTrackPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseUpdateTrackPosition} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseUpdateTrackPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 position = 1;
 * @return {number}
 */
proto.pb.remote.ResponseUpdateTrackPosition.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseUpdateTrackPosition.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseUpdateTrackPosition.prototype.clearPosition = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseUpdateTrackPosition.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestConnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestConnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestConnect.displayName = 'proto.pb.remote.RequestConnect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestConnect.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestConnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestConnect} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestConnect.toObject = function(includeInstance, msg) {
  var f, obj = {
    authCode: jspb.Message.getField(msg, 1),
    sendPlaylistSongs: jspb.Message.getField(msg, 2),
    downloader: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestConnect}
 */
proto.pb.remote.RequestConnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestConnect;
  return proto.pb.remote.RequestConnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestConnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestConnect}
 */
proto.pb.remote.RequestConnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAuthCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSendPlaylistSongs(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDownloader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestConnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestConnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestConnect} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestConnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 auth_code = 1;
 * @return {number}
 */
proto.pb.remote.RequestConnect.prototype.getAuthCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestConnect.prototype.setAuthCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestConnect.prototype.clearAuthCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestConnect.prototype.hasAuthCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool send_playlist_songs = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.RequestConnect.prototype.getSendPlaylistSongs = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.pb.remote.RequestConnect.prototype.setSendPlaylistSongs = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.RequestConnect.prototype.clearSendPlaylistSongs = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestConnect.prototype.hasSendPlaylistSongs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool downloader = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.RequestConnect.prototype.getDownloader = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.pb.remote.RequestConnect.prototype.setDownloader = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.RequestConnect.prototype.clearDownloader = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestConnect.prototype.hasDownloader = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseDisconnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseDisconnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseDisconnect.displayName = 'proto.pb.remote.ResponseDisconnect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseDisconnect.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseDisconnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseDisconnect} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseDisconnect.toObject = function(includeInstance, msg) {
  var f, obj = {
    reasonDisconnect: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseDisconnect}
 */
proto.pb.remote.ResponseDisconnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseDisconnect;
  return proto.pb.remote.ResponseDisconnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseDisconnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseDisconnect}
 */
proto.pb.remote.ResponseDisconnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.remote.ReasonDisconnect} */ (reader.readEnum());
      msg.setReasonDisconnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseDisconnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseDisconnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseDisconnect} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseDisconnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.pb.remote.ReasonDisconnect} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ReasonDisconnect reason_disconnect = 1;
 * @return {!proto.pb.remote.ReasonDisconnect}
 */
proto.pb.remote.ResponseDisconnect.prototype.getReasonDisconnect = function() {
  return /** @type {!proto.pb.remote.ReasonDisconnect} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.pb.remote.ReasonDisconnect} value */
proto.pb.remote.ResponseDisconnect.prototype.setReasonDisconnect = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseDisconnect.prototype.clearReasonDisconnect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseDisconnect.prototype.hasReasonDisconnect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseActiveChanged = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseActiveChanged, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseActiveChanged.displayName = 'proto.pb.remote.ResponseActiveChanged';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseActiveChanged.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseActiveChanged.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseActiveChanged} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseActiveChanged.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseActiveChanged}
 */
proto.pb.remote.ResponseActiveChanged.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseActiveChanged;
  return proto.pb.remote.ResponseActiveChanged.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseActiveChanged} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseActiveChanged}
 */
proto.pb.remote.ResponseActiveChanged.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseActiveChanged.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseActiveChanged.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseActiveChanged} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseActiveChanged.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.remote.ResponseActiveChanged.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseActiveChanged.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseActiveChanged.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseActiveChanged.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestSetTrackPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestSetTrackPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestSetTrackPosition.displayName = 'proto.pb.remote.RequestSetTrackPosition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestSetTrackPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestSetTrackPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestSetTrackPosition} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestSetTrackPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestSetTrackPosition}
 */
proto.pb.remote.RequestSetTrackPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestSetTrackPosition;
  return proto.pb.remote.RequestSetTrackPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestSetTrackPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestSetTrackPosition}
 */
proto.pb.remote.RequestSetTrackPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestSetTrackPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestSetTrackPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestSetTrackPosition} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestSetTrackPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 position = 1;
 * @return {number}
 */
proto.pb.remote.RequestSetTrackPosition.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestSetTrackPosition.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestSetTrackPosition.prototype.clearPosition = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestSetTrackPosition.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestInsertUrls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.remote.RequestInsertUrls.repeatedFields_, null);
};
goog.inherits(proto.pb.remote.RequestInsertUrls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestInsertUrls.displayName = 'proto.pb.remote.RequestInsertUrls';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.remote.RequestInsertUrls.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestInsertUrls.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestInsertUrls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestInsertUrls} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestInsertUrls.toObject = function(includeInstance, msg) {
  var f, obj = {
    playlistId: jspb.Message.getField(msg, 1),
    urlsList: jspb.Message.getField(msg, 2),
    position: jspb.Message.getFieldWithDefault(msg, 3, -1),
    playNow: jspb.Message.getFieldWithDefault(msg, 4, false),
    enqueue: jspb.Message.getFieldWithDefault(msg, 5, false),
    songsList: jspb.Message.toObjectList(msg.getSongsList(),
    proto.pb.remote.SongMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestInsertUrls}
 */
proto.pb.remote.RequestInsertUrls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestInsertUrls;
  return proto.pb.remote.RequestInsertUrls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestInsertUrls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestInsertUrls}
 */
proto.pb.remote.RequestInsertUrls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaylistId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlayNow(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnqueue(value);
      break;
    case 6:
      var value = new proto.pb.remote.SongMetadata;
      reader.readMessage(value,proto.pb.remote.SongMetadata.deserializeBinaryFromReader);
      msg.addSongs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestInsertUrls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestInsertUrls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestInsertUrls} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestInsertUrls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSongsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.pb.remote.SongMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 playlist_id = 1;
 * @return {number}
 */
proto.pb.remote.RequestInsertUrls.prototype.getPlaylistId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestInsertUrls.prototype.setPlaylistId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestInsertUrls.prototype.clearPlaylistId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestInsertUrls.prototype.hasPlaylistId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string urls = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.pb.remote.RequestInsertUrls.prototype.getUrlsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.pb.remote.RequestInsertUrls.prototype.setUrlsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.pb.remote.RequestInsertUrls.prototype.addUrls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.pb.remote.RequestInsertUrls.prototype.clearUrlsList = function() {
  this.setUrlsList([]);
};


/**
 * optional int32 position = 3;
 * @return {number}
 */
proto.pb.remote.RequestInsertUrls.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, -1));
};


/** @param {number} value */
proto.pb.remote.RequestInsertUrls.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.RequestInsertUrls.prototype.clearPosition = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestInsertUrls.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool play_now = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.RequestInsertUrls.prototype.getPlayNow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.pb.remote.RequestInsertUrls.prototype.setPlayNow = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.pb.remote.RequestInsertUrls.prototype.clearPlayNow = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestInsertUrls.prototype.hasPlayNow = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool enqueue = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.RequestInsertUrls.prototype.getEnqueue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.pb.remote.RequestInsertUrls.prototype.setEnqueue = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.pb.remote.RequestInsertUrls.prototype.clearEnqueue = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestInsertUrls.prototype.hasEnqueue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated SongMetadata songs = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb.remote.SongMetadata>}
 */
proto.pb.remote.RequestInsertUrls.prototype.getSongsList = function() {
  return /** @type{!Array.<!proto.pb.remote.SongMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.remote.SongMetadata, 6));
};


/** @param {!Array.<!proto.pb.remote.SongMetadata>} value */
proto.pb.remote.RequestInsertUrls.prototype.setSongsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pb.remote.SongMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.remote.SongMetadata}
 */
proto.pb.remote.RequestInsertUrls.prototype.addSongs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pb.remote.SongMetadata, opt_index);
};


proto.pb.remote.RequestInsertUrls.prototype.clearSongsList = function() {
  this.setSongsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestRemoveSongs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.remote.RequestRemoveSongs.repeatedFields_, null);
};
goog.inherits(proto.pb.remote.RequestRemoveSongs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestRemoveSongs.displayName = 'proto.pb.remote.RequestRemoveSongs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.remote.RequestRemoveSongs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestRemoveSongs.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestRemoveSongs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestRemoveSongs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestRemoveSongs.toObject = function(includeInstance, msg) {
  var f, obj = {
    playlistId: jspb.Message.getField(msg, 1),
    songsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestRemoveSongs}
 */
proto.pb.remote.RequestRemoveSongs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestRemoveSongs;
  return proto.pb.remote.RequestRemoveSongs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestRemoveSongs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestRemoveSongs}
 */
proto.pb.remote.RequestRemoveSongs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaylistId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addSongs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestRemoveSongs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestRemoveSongs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestRemoveSongs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestRemoveSongs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSongsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 playlist_id = 1;
 * @return {number}
 */
proto.pb.remote.RequestRemoveSongs.prototype.getPlaylistId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestRemoveSongs.prototype.setPlaylistId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestRemoveSongs.prototype.clearPlaylistId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestRemoveSongs.prototype.hasPlaylistId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 songs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.pb.remote.RequestRemoveSongs.prototype.getSongsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.pb.remote.RequestRemoveSongs.prototype.setSongsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.pb.remote.RequestRemoveSongs.prototype.addSongs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.pb.remote.RequestRemoveSongs.prototype.clearSongsList = function() {
  this.setSongsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestOpenPlaylist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestOpenPlaylist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestOpenPlaylist.displayName = 'proto.pb.remote.RequestOpenPlaylist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestOpenPlaylist.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestOpenPlaylist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestOpenPlaylist} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestOpenPlaylist.toObject = function(includeInstance, msg) {
  var f, obj = {
    playlistId: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestOpenPlaylist}
 */
proto.pb.remote.RequestOpenPlaylist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestOpenPlaylist;
  return proto.pb.remote.RequestOpenPlaylist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestOpenPlaylist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestOpenPlaylist}
 */
proto.pb.remote.RequestOpenPlaylist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaylistId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestOpenPlaylist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestOpenPlaylist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestOpenPlaylist} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestOpenPlaylist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 playlist_id = 1;
 * @return {number}
 */
proto.pb.remote.RequestOpenPlaylist.prototype.getPlaylistId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestOpenPlaylist.prototype.setPlaylistId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestOpenPlaylist.prototype.clearPlaylistId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestOpenPlaylist.prototype.hasPlaylistId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestClosePlaylist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestClosePlaylist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestClosePlaylist.displayName = 'proto.pb.remote.RequestClosePlaylist';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestClosePlaylist.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestClosePlaylist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestClosePlaylist} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestClosePlaylist.toObject = function(includeInstance, msg) {
  var f, obj = {
    playlistId: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestClosePlaylist}
 */
proto.pb.remote.RequestClosePlaylist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestClosePlaylist;
  return proto.pb.remote.RequestClosePlaylist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestClosePlaylist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestClosePlaylist}
 */
proto.pb.remote.RequestClosePlaylist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaylistId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestClosePlaylist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestClosePlaylist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestClosePlaylist} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestClosePlaylist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 playlist_id = 1;
 * @return {number}
 */
proto.pb.remote.RequestClosePlaylist.prototype.getPlaylistId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.RequestClosePlaylist.prototype.setPlaylistId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestClosePlaylist.prototype.clearPlaylistId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestClosePlaylist.prototype.hasPlaylistId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseLyrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.remote.ResponseLyrics.repeatedFields_, null);
};
goog.inherits(proto.pb.remote.ResponseLyrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseLyrics.displayName = 'proto.pb.remote.ResponseLyrics';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.remote.ResponseLyrics.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseLyrics.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseLyrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseLyrics} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseLyrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    lyricsList: jspb.Message.toObjectList(msg.getLyricsList(),
    proto.pb.remote.Lyric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseLyrics}
 */
proto.pb.remote.ResponseLyrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseLyrics;
  return proto.pb.remote.ResponseLyrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseLyrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseLyrics}
 */
proto.pb.remote.ResponseLyrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.remote.Lyric;
      reader.readMessage(value,proto.pb.remote.Lyric.deserializeBinaryFromReader);
      msg.addLyrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseLyrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseLyrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseLyrics} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseLyrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLyricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.remote.Lyric.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Lyric lyrics = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb.remote.Lyric>}
 */
proto.pb.remote.ResponseLyrics.prototype.getLyricsList = function() {
  return /** @type{!Array.<!proto.pb.remote.Lyric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.remote.Lyric, 1));
};


/** @param {!Array.<!proto.pb.remote.Lyric>} value */
proto.pb.remote.ResponseLyrics.prototype.setLyricsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.remote.Lyric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.remote.Lyric}
 */
proto.pb.remote.ResponseLyrics.prototype.addLyrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.remote.Lyric, opt_index);
};


proto.pb.remote.ResponseLyrics.prototype.clearLyricsList = function() {
  this.setLyricsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.Lyric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.Lyric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.Lyric.displayName = 'proto.pb.remote.Lyric';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.Lyric.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.Lyric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.Lyric} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.Lyric.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    title: jspb.Message.getField(msg, 2),
    content: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.Lyric}
 */
proto.pb.remote.Lyric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.Lyric;
  return proto.pb.remote.Lyric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.Lyric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.Lyric}
 */
proto.pb.remote.Lyric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.Lyric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.Lyric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.Lyric} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.Lyric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.remote.Lyric.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.remote.Lyric.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.Lyric.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Lyric.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.pb.remote.Lyric.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.remote.Lyric.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.Lyric.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Lyric.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.pb.remote.Lyric.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.remote.Lyric.prototype.setContent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.Lyric.prototype.clearContent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Lyric.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestDownloadSongs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.remote.RequestDownloadSongs.repeatedFields_, null);
};
goog.inherits(proto.pb.remote.RequestDownloadSongs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestDownloadSongs.displayName = 'proto.pb.remote.RequestDownloadSongs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.remote.RequestDownloadSongs.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestDownloadSongs.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestDownloadSongs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestDownloadSongs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestDownloadSongs.toObject = function(includeInstance, msg) {
  var f, obj = {
    downloadItem: jspb.Message.getField(msg, 1),
    playlistId: jspb.Message.getField(msg, 2),
    urlsList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestDownloadSongs}
 */
proto.pb.remote.RequestDownloadSongs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestDownloadSongs;
  return proto.pb.remote.RequestDownloadSongs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestDownloadSongs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestDownloadSongs}
 */
proto.pb.remote.RequestDownloadSongs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pb.remote.DownloadItem} */ (reader.readEnum());
      msg.setDownloadItem(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaylistId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestDownloadSongs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestDownloadSongs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestDownloadSongs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestDownloadSongs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.pb.remote.DownloadItem} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional DownloadItem download_item = 1;
 * @return {!proto.pb.remote.DownloadItem}
 */
proto.pb.remote.RequestDownloadSongs.prototype.getDownloadItem = function() {
  return /** @type {!proto.pb.remote.DownloadItem} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.pb.remote.DownloadItem} value */
proto.pb.remote.RequestDownloadSongs.prototype.setDownloadItem = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestDownloadSongs.prototype.clearDownloadItem = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestDownloadSongs.prototype.hasDownloadItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 playlist_id = 2;
 * @return {number}
 */
proto.pb.remote.RequestDownloadSongs.prototype.getPlaylistId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.remote.RequestDownloadSongs.prototype.setPlaylistId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.RequestDownloadSongs.prototype.clearPlaylistId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestDownloadSongs.prototype.hasPlaylistId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string urls = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.pb.remote.RequestDownloadSongs.prototype.getUrlsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.pb.remote.RequestDownloadSongs.prototype.setUrlsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.pb.remote.RequestDownloadSongs.prototype.addUrls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.pb.remote.RequestDownloadSongs.prototype.clearUrlsList = function() {
  this.setUrlsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseSongFileChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseSongFileChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseSongFileChunk.displayName = 'proto.pb.remote.ResponseSongFileChunk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseSongFileChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseSongFileChunk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseSongFileChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunkNumber: jspb.Message.getField(msg, 1),
    chunkCount: jspb.Message.getField(msg, 2),
    fileNumber: jspb.Message.getField(msg, 3),
    fileCount: jspb.Message.getField(msg, 4),
    songMetadata: (f = msg.getSongMetadata()) && proto.pb.remote.SongMetadata.toObject(includeInstance, f),
    data: msg.getData_asB64(),
    size: jspb.Message.getField(msg, 8),
    fileHash: msg.getFileHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseSongFileChunk}
 */
proto.pb.remote.ResponseSongFileChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseSongFileChunk;
  return proto.pb.remote.ResponseSongFileChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseSongFileChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseSongFileChunk}
 */
proto.pb.remote.ResponseSongFileChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFileNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFileCount(value);
      break;
    case 6:
      var value = new proto.pb.remote.SongMetadata;
      reader.readMessage(value,proto.pb.remote.SongMetadata.deserializeBinaryFromReader);
      msg.setSongMetadata(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseSongFileChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseSongFileChunk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseSongFileChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSongMetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pb.remote.SongMetadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional int32 chunk_number = 1;
 * @return {number}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getChunkNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setChunkNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearChunkNumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasChunkNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 chunk_count = 2;
 * @return {number}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getChunkCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setChunkCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearChunkCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasChunkCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 file_number = 3;
 * @return {number}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getFileNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setFileNumber = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearFileNumber = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasFileNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 file_count = 4;
 * @return {number}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getFileCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setFileCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearFileCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasFileCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SongMetadata song_metadata = 6;
 * @return {?proto.pb.remote.SongMetadata}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getSongMetadata = function() {
  return /** @type{?proto.pb.remote.SongMetadata} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.SongMetadata, 6));
};


/** @param {?proto.pb.remote.SongMetadata|undefined} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setSongMetadata = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearSongMetadata = function() {
  this.setSongMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasSongMetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes data = 7;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setData = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearData = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 size = 8;
 * @return {number}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setSize = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearSize = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasSize = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes file_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getFileHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes file_hash = 9;
 * This is a type-conversion wrapper around `getFileHash()`
 * @return {string}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getFileHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileHash()));
};


/**
 * optional bytes file_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileHash()`
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.getFileHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.remote.ResponseSongFileChunk.prototype.setFileHash = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.pb.remote.ResponseSongFileChunk.prototype.clearFileHash = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongFileChunk.prototype.hasFileHash = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseLibraryChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseLibraryChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseLibraryChunk.displayName = 'proto.pb.remote.ResponseLibraryChunk';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseLibraryChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseLibraryChunk} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseLibraryChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunkNumber: jspb.Message.getField(msg, 1),
    chunkCount: jspb.Message.getField(msg, 2),
    data: msg.getData_asB64(),
    size: jspb.Message.getField(msg, 4),
    fileHash: msg.getFileHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseLibraryChunk}
 */
proto.pb.remote.ResponseLibraryChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseLibraryChunk;
  return proto.pb.remote.ResponseLibraryChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseLibraryChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseLibraryChunk}
 */
proto.pb.remote.ResponseLibraryChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChunkCount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseLibraryChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseLibraryChunk} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseLibraryChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional int32 chunk_number = 1;
 * @return {number}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getChunkNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseLibraryChunk.prototype.setChunkNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseLibraryChunk.prototype.clearChunkNumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.hasChunkNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 chunk_count = 2;
 * @return {number}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getChunkCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseLibraryChunk.prototype.setChunkCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.ResponseLibraryChunk.prototype.clearChunkCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.hasChunkCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.remote.ResponseLibraryChunk.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.ResponseLibraryChunk.prototype.clearData = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 size = 4;
 * @return {number}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseLibraryChunk.prototype.setSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.pb.remote.ResponseLibraryChunk.prototype.clearSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.hasSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes file_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getFileHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes file_hash = 5;
 * This is a type-conversion wrapper around `getFileHash()`
 * @return {string}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getFileHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileHash()));
};


/**
 * optional bytes file_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileHash()`
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.getFileHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.remote.ResponseLibraryChunk.prototype.setFileHash = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.pb.remote.ResponseLibraryChunk.prototype.clearFileHash = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseLibraryChunk.prototype.hasFileHash = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseSongOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseSongOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseSongOffer.displayName = 'proto.pb.remote.ResponseSongOffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseSongOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseSongOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseSongOffer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseSongOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    accepted: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseSongOffer}
 */
proto.pb.remote.ResponseSongOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseSongOffer;
  return proto.pb.remote.ResponseSongOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseSongOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseSongOffer}
 */
proto.pb.remote.ResponseSongOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccepted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseSongOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseSongOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseSongOffer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseSongOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool accepted = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.remote.ResponseSongOffer.prototype.getAccepted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pb.remote.ResponseSongOffer.prototype.setAccepted = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseSongOffer.prototype.clearAccepted = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseSongOffer.prototype.hasAccepted = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestRateSong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestRateSong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestRateSong.displayName = 'proto.pb.remote.RequestRateSong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestRateSong.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestRateSong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestRateSong} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestRateSong.toObject = function(includeInstance, msg) {
  var f, obj = {
    rating: jspb.Message.getOptionalFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestRateSong}
 */
proto.pb.remote.RequestRateSong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestRateSong;
  return proto.pb.remote.RequestRateSong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestRateSong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestRateSong}
 */
proto.pb.remote.RequestRateSong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRating(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestRateSong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestRateSong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestRateSong} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestRateSong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float rating = 1;
 * @return {number}
 */
proto.pb.remote.RequestRateSong.prototype.getRating = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.pb.remote.RequestRateSong.prototype.setRating = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestRateSong.prototype.clearRating = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestRateSong.prototype.hasRating = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseDownloadTotalSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseDownloadTotalSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseDownloadTotalSize.displayName = 'proto.pb.remote.ResponseDownloadTotalSize';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseDownloadTotalSize.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseDownloadTotalSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseDownloadTotalSize} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseDownloadTotalSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalSize: jspb.Message.getField(msg, 1),
    fileCount: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseDownloadTotalSize}
 */
proto.pb.remote.ResponseDownloadTotalSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseDownloadTotalSize;
  return proto.pb.remote.ResponseDownloadTotalSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseDownloadTotalSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseDownloadTotalSize}
 */
proto.pb.remote.ResponseDownloadTotalSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFileCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseDownloadTotalSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseDownloadTotalSize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseDownloadTotalSize} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseDownloadTotalSize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 total_size = 1;
 * @return {number}
 */
proto.pb.remote.ResponseDownloadTotalSize.prototype.getTotalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseDownloadTotalSize.prototype.setTotalSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseDownloadTotalSize.prototype.clearTotalSize = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseDownloadTotalSize.prototype.hasTotalSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 file_count = 2;
 * @return {number}
 */
proto.pb.remote.ResponseDownloadTotalSize.prototype.getFileCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseDownloadTotalSize.prototype.setFileCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.ResponseDownloadTotalSize.prototype.clearFileCount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseDownloadTotalSize.prototype.hasFileCount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.RequestGlobalSearch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.RequestGlobalSearch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.RequestGlobalSearch.displayName = 'proto.pb.remote.RequestGlobalSearch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.RequestGlobalSearch.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.RequestGlobalSearch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.RequestGlobalSearch} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.RequestGlobalSearch.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.RequestGlobalSearch}
 */
proto.pb.remote.RequestGlobalSearch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.RequestGlobalSearch;
  return proto.pb.remote.RequestGlobalSearch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.RequestGlobalSearch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.RequestGlobalSearch}
 */
proto.pb.remote.RequestGlobalSearch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.RequestGlobalSearch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.RequestGlobalSearch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.RequestGlobalSearch} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.RequestGlobalSearch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.pb.remote.RequestGlobalSearch.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.remote.RequestGlobalSearch.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.RequestGlobalSearch.prototype.clearQuery = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.RequestGlobalSearch.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseGlobalSearch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.remote.ResponseGlobalSearch.repeatedFields_, null);
};
goog.inherits(proto.pb.remote.ResponseGlobalSearch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseGlobalSearch.displayName = 'proto.pb.remote.ResponseGlobalSearch';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.remote.ResponseGlobalSearch.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseGlobalSearch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseGlobalSearch} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseGlobalSearch.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    query: jspb.Message.getField(msg, 2),
    searchProvider: jspb.Message.getField(msg, 3),
    songMetadataList: jspb.Message.toObjectList(msg.getSongMetadataList(),
    proto.pb.remote.SongMetadata.toObject, includeInstance),
    searchProviderIcon: msg.getSearchProviderIcon_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseGlobalSearch}
 */
proto.pb.remote.ResponseGlobalSearch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseGlobalSearch;
  return proto.pb.remote.ResponseGlobalSearch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseGlobalSearch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseGlobalSearch}
 */
proto.pb.remote.ResponseGlobalSearch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchProvider(value);
      break;
    case 4:
      var value = new proto.pb.remote.SongMetadata;
      reader.readMessage(value,proto.pb.remote.SongMetadata.deserializeBinaryFromReader);
      msg.addSongMetadata(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSearchProviderIcon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseGlobalSearch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseGlobalSearch} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseGlobalSearch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSongMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.remote.SongMetadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseGlobalSearch.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseGlobalSearch.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.remote.ResponseGlobalSearch.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.ResponseGlobalSearch.prototype.clearQuery = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string search_provider = 3;
 * @return {string}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.getSearchProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pb.remote.ResponseGlobalSearch.prototype.setSearchProvider = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.ResponseGlobalSearch.prototype.clearSearchProvider = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.hasSearchProvider = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated SongMetadata song_metadata = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb.remote.SongMetadata>}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.getSongMetadataList = function() {
  return /** @type{!Array.<!proto.pb.remote.SongMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.remote.SongMetadata, 4));
};


/** @param {!Array.<!proto.pb.remote.SongMetadata>} value */
proto.pb.remote.ResponseGlobalSearch.prototype.setSongMetadataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.remote.SongMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.remote.SongMetadata}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.addSongMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.remote.SongMetadata, opt_index);
};


proto.pb.remote.ResponseGlobalSearch.prototype.clearSongMetadataList = function() {
  this.setSongMetadataList([]);
};


/**
 * optional bytes search_provider_icon = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.getSearchProviderIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes search_provider_icon = 5;
 * This is a type-conversion wrapper around `getSearchProviderIcon()`
 * @return {string}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.getSearchProviderIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSearchProviderIcon()));
};


/**
 * optional bytes search_provider_icon = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSearchProviderIcon()`
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.getSearchProviderIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSearchProviderIcon()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb.remote.ResponseGlobalSearch.prototype.setSearchProviderIcon = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.pb.remote.ResponseGlobalSearch.prototype.clearSearchProviderIcon = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseGlobalSearch.prototype.hasSearchProviderIcon = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseTranscoderStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseTranscoderStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseTranscoderStatus.displayName = 'proto.pb.remote.ResponseTranscoderStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseTranscoderStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseTranscoderStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseTranscoderStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseTranscoderStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    processed: jspb.Message.getField(msg, 1),
    total: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseTranscoderStatus}
 */
proto.pb.remote.ResponseTranscoderStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseTranscoderStatus;
  return proto.pb.remote.ResponseTranscoderStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseTranscoderStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseTranscoderStatus}
 */
proto.pb.remote.ResponseTranscoderStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseTranscoderStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseTranscoderStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseTranscoderStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseTranscoderStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 processed = 1;
 * @return {number}
 */
proto.pb.remote.ResponseTranscoderStatus.prototype.getProcessed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseTranscoderStatus.prototype.setProcessed = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseTranscoderStatus.prototype.clearProcessed = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseTranscoderStatus.prototype.hasProcessed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 total = 2;
 * @return {number}
 */
proto.pb.remote.ResponseTranscoderStatus.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseTranscoderStatus.prototype.setTotal = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.ResponseTranscoderStatus.prototype.clearTotal = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseTranscoderStatus.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.ResponseGlobalSearchStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.ResponseGlobalSearchStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.ResponseGlobalSearchStatus.displayName = 'proto.pb.remote.ResponseGlobalSearchStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.ResponseGlobalSearchStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.ResponseGlobalSearchStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.ResponseGlobalSearchStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    query: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.ResponseGlobalSearchStatus}
 */
proto.pb.remote.ResponseGlobalSearchStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.ResponseGlobalSearchStatus;
  return proto.pb.remote.ResponseGlobalSearchStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.ResponseGlobalSearchStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.ResponseGlobalSearchStatus}
 */
proto.pb.remote.ResponseGlobalSearchStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {!proto.pb.remote.GlobalSearchStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.ResponseGlobalSearchStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.ResponseGlobalSearchStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.ResponseGlobalSearchStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.pb.remote.GlobalSearchStatus} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.ResponseGlobalSearchStatus.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.ResponseGlobalSearchStatus.prototype.clearQuery = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GlobalSearchStatus status = 3;
 * @return {!proto.pb.remote.GlobalSearchStatus}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.getStatus = function() {
  return /** @type {!proto.pb.remote.GlobalSearchStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.pb.remote.GlobalSearchStatus} value */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.remote.ResponseGlobalSearchStatus.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.ResponseGlobalSearchStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.remote.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.remote.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.remote.Message.displayName = 'proto.pb.remote.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.remote.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.remote.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.remote.Message} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.remote.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 21),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestConnect: (f = msg.getRequestConnect()) && proto.pb.remote.RequestConnect.toObject(includeInstance, f),
    requestPlaylists: (f = msg.getRequestPlaylists()) && proto.pb.remote.RequestPlaylists.toObject(includeInstance, f),
    requestPlaylistSongs: (f = msg.getRequestPlaylistSongs()) && proto.pb.remote.RequestPlaylistSongs.toObject(includeInstance, f),
    requestChangeSong: (f = msg.getRequestChangeSong()) && proto.pb.remote.RequestChangeSong.toObject(includeInstance, f),
    requestSetVolume: (f = msg.getRequestSetVolume()) && proto.pb.remote.RequestSetVolume.toObject(includeInstance, f),
    requestSetTrackPosition: (f = msg.getRequestSetTrackPosition()) && proto.pb.remote.RequestSetTrackPosition.toObject(includeInstance, f),
    requestInsertUrls: (f = msg.getRequestInsertUrls()) && proto.pb.remote.RequestInsertUrls.toObject(includeInstance, f),
    requestRemoveSongs: (f = msg.getRequestRemoveSongs()) && proto.pb.remote.RequestRemoveSongs.toObject(includeInstance, f),
    requestOpenPlaylist: (f = msg.getRequestOpenPlaylist()) && proto.pb.remote.RequestOpenPlaylist.toObject(includeInstance, f),
    requestClosePlaylist: (f = msg.getRequestClosePlaylist()) && proto.pb.remote.RequestClosePlaylist.toObject(includeInstance, f),
    requestDownloadSongs: (f = msg.getRequestDownloadSongs()) && proto.pb.remote.RequestDownloadSongs.toObject(includeInstance, f),
    requestRateSong: (f = msg.getRequestRateSong()) && proto.pb.remote.RequestRateSong.toObject(includeInstance, f),
    requestGlobalSearch: (f = msg.getRequestGlobalSearch()) && proto.pb.remote.RequestGlobalSearch.toObject(includeInstance, f),
    repeat: (f = msg.getRepeat()) && proto.pb.remote.Repeat.toObject(includeInstance, f),
    shuffle: (f = msg.getShuffle()) && proto.pb.remote.Shuffle.toObject(includeInstance, f),
    responseClementineInfo: (f = msg.getResponseClementineInfo()) && proto.pb.remote.ResponseClementineInfo.toObject(includeInstance, f),
    responseCurrentMetadata: (f = msg.getResponseCurrentMetadata()) && proto.pb.remote.ResponseCurrentMetadata.toObject(includeInstance, f),
    responsePlaylists: (f = msg.getResponsePlaylists()) && proto.pb.remote.ResponsePlaylists.toObject(includeInstance, f),
    responsePlaylistSongs: (f = msg.getResponsePlaylistSongs()) && proto.pb.remote.ResponsePlaylistSongs.toObject(includeInstance, f),
    responseEngineStateChanged: (f = msg.getResponseEngineStateChanged()) && proto.pb.remote.ResponseEngineStateChanged.toObject(includeInstance, f),
    responseUpdateTrackPosition: (f = msg.getResponseUpdateTrackPosition()) && proto.pb.remote.ResponseUpdateTrackPosition.toObject(includeInstance, f),
    responseDisconnect: (f = msg.getResponseDisconnect()) && proto.pb.remote.ResponseDisconnect.toObject(includeInstance, f),
    responseActiveChanged: (f = msg.getResponseActiveChanged()) && proto.pb.remote.ResponseActiveChanged.toObject(includeInstance, f),
    responseLyrics: (f = msg.getResponseLyrics()) && proto.pb.remote.ResponseLyrics.toObject(includeInstance, f),
    responseSongFileChunk: (f = msg.getResponseSongFileChunk()) && proto.pb.remote.ResponseSongFileChunk.toObject(includeInstance, f),
    responseSongOffer: (f = msg.getResponseSongOffer()) && proto.pb.remote.ResponseSongOffer.toObject(includeInstance, f),
    responseLibraryChunk: (f = msg.getResponseLibraryChunk()) && proto.pb.remote.ResponseLibraryChunk.toObject(includeInstance, f),
    responseDownloadTotalSize: (f = msg.getResponseDownloadTotalSize()) && proto.pb.remote.ResponseDownloadTotalSize.toObject(includeInstance, f),
    responseGlobalSearch: (f = msg.getResponseGlobalSearch()) && proto.pb.remote.ResponseGlobalSearch.toObject(includeInstance, f),
    responseTranscoderStatus: (f = msg.getResponseTranscoderStatus()) && proto.pb.remote.ResponseTranscoderStatus.toObject(includeInstance, f),
    responseGlobalSearchStatus: (f = msg.getResponseGlobalSearchStatus()) && proto.pb.remote.ResponseGlobalSearchStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.remote.Message}
 */
proto.pb.remote.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.remote.Message;
  return proto.pb.remote.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.remote.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.remote.Message}
 */
proto.pb.remote.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.remote.MsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 21:
      var value = new proto.pb.remote.RequestConnect;
      reader.readMessage(value,proto.pb.remote.RequestConnect.deserializeBinaryFromReader);
      msg.setRequestConnect(value);
      break;
    case 27:
      var value = new proto.pb.remote.RequestPlaylists;
      reader.readMessage(value,proto.pb.remote.RequestPlaylists.deserializeBinaryFromReader);
      msg.setRequestPlaylists(value);
      break;
    case 10:
      var value = new proto.pb.remote.RequestPlaylistSongs;
      reader.readMessage(value,proto.pb.remote.RequestPlaylistSongs.deserializeBinaryFromReader);
      msg.setRequestPlaylistSongs(value);
      break;
    case 11:
      var value = new proto.pb.remote.RequestChangeSong;
      reader.readMessage(value,proto.pb.remote.RequestChangeSong.deserializeBinaryFromReader);
      msg.setRequestChangeSong(value);
      break;
    case 12:
      var value = new proto.pb.remote.RequestSetVolume;
      reader.readMessage(value,proto.pb.remote.RequestSetVolume.deserializeBinaryFromReader);
      msg.setRequestSetVolume(value);
      break;
    case 23:
      var value = new proto.pb.remote.RequestSetTrackPosition;
      reader.readMessage(value,proto.pb.remote.RequestSetTrackPosition.deserializeBinaryFromReader);
      msg.setRequestSetTrackPosition(value);
      break;
    case 25:
      var value = new proto.pb.remote.RequestInsertUrls;
      reader.readMessage(value,proto.pb.remote.RequestInsertUrls.deserializeBinaryFromReader);
      msg.setRequestInsertUrls(value);
      break;
    case 26:
      var value = new proto.pb.remote.RequestRemoveSongs;
      reader.readMessage(value,proto.pb.remote.RequestRemoveSongs.deserializeBinaryFromReader);
      msg.setRequestRemoveSongs(value);
      break;
    case 28:
      var value = new proto.pb.remote.RequestOpenPlaylist;
      reader.readMessage(value,proto.pb.remote.RequestOpenPlaylist.deserializeBinaryFromReader);
      msg.setRequestOpenPlaylist(value);
      break;
    case 29:
      var value = new proto.pb.remote.RequestClosePlaylist;
      reader.readMessage(value,proto.pb.remote.RequestClosePlaylist.deserializeBinaryFromReader);
      msg.setRequestClosePlaylist(value);
      break;
    case 31:
      var value = new proto.pb.remote.RequestDownloadSongs;
      reader.readMessage(value,proto.pb.remote.RequestDownloadSongs.deserializeBinaryFromReader);
      msg.setRequestDownloadSongs(value);
      break;
    case 35:
      var value = new proto.pb.remote.RequestRateSong;
      reader.readMessage(value,proto.pb.remote.RequestRateSong.deserializeBinaryFromReader);
      msg.setRequestRateSong(value);
      break;
    case 37:
      var value = new proto.pb.remote.RequestGlobalSearch;
      reader.readMessage(value,proto.pb.remote.RequestGlobalSearch.deserializeBinaryFromReader);
      msg.setRequestGlobalSearch(value);
      break;
    case 13:
      var value = new proto.pb.remote.Repeat;
      reader.readMessage(value,proto.pb.remote.Repeat.deserializeBinaryFromReader);
      msg.setRepeat(value);
      break;
    case 14:
      var value = new proto.pb.remote.Shuffle;
      reader.readMessage(value,proto.pb.remote.Shuffle.deserializeBinaryFromReader);
      msg.setShuffle(value);
      break;
    case 15:
      var value = new proto.pb.remote.ResponseClementineInfo;
      reader.readMessage(value,proto.pb.remote.ResponseClementineInfo.deserializeBinaryFromReader);
      msg.setResponseClementineInfo(value);
      break;
    case 16:
      var value = new proto.pb.remote.ResponseCurrentMetadata;
      reader.readMessage(value,proto.pb.remote.ResponseCurrentMetadata.deserializeBinaryFromReader);
      msg.setResponseCurrentMetadata(value);
      break;
    case 17:
      var value = new proto.pb.remote.ResponsePlaylists;
      reader.readMessage(value,proto.pb.remote.ResponsePlaylists.deserializeBinaryFromReader);
      msg.setResponsePlaylists(value);
      break;
    case 18:
      var value = new proto.pb.remote.ResponsePlaylistSongs;
      reader.readMessage(value,proto.pb.remote.ResponsePlaylistSongs.deserializeBinaryFromReader);
      msg.setResponsePlaylistSongs(value);
      break;
    case 19:
      var value = new proto.pb.remote.ResponseEngineStateChanged;
      reader.readMessage(value,proto.pb.remote.ResponseEngineStateChanged.deserializeBinaryFromReader);
      msg.setResponseEngineStateChanged(value);
      break;
    case 20:
      var value = new proto.pb.remote.ResponseUpdateTrackPosition;
      reader.readMessage(value,proto.pb.remote.ResponseUpdateTrackPosition.deserializeBinaryFromReader);
      msg.setResponseUpdateTrackPosition(value);
      break;
    case 22:
      var value = new proto.pb.remote.ResponseDisconnect;
      reader.readMessage(value,proto.pb.remote.ResponseDisconnect.deserializeBinaryFromReader);
      msg.setResponseDisconnect(value);
      break;
    case 24:
      var value = new proto.pb.remote.ResponseActiveChanged;
      reader.readMessage(value,proto.pb.remote.ResponseActiveChanged.deserializeBinaryFromReader);
      msg.setResponseActiveChanged(value);
      break;
    case 30:
      var value = new proto.pb.remote.ResponseLyrics;
      reader.readMessage(value,proto.pb.remote.ResponseLyrics.deserializeBinaryFromReader);
      msg.setResponseLyrics(value);
      break;
    case 32:
      var value = new proto.pb.remote.ResponseSongFileChunk;
      reader.readMessage(value,proto.pb.remote.ResponseSongFileChunk.deserializeBinaryFromReader);
      msg.setResponseSongFileChunk(value);
      break;
    case 33:
      var value = new proto.pb.remote.ResponseSongOffer;
      reader.readMessage(value,proto.pb.remote.ResponseSongOffer.deserializeBinaryFromReader);
      msg.setResponseSongOffer(value);
      break;
    case 34:
      var value = new proto.pb.remote.ResponseLibraryChunk;
      reader.readMessage(value,proto.pb.remote.ResponseLibraryChunk.deserializeBinaryFromReader);
      msg.setResponseLibraryChunk(value);
      break;
    case 36:
      var value = new proto.pb.remote.ResponseDownloadTotalSize;
      reader.readMessage(value,proto.pb.remote.ResponseDownloadTotalSize.deserializeBinaryFromReader);
      msg.setResponseDownloadTotalSize(value);
      break;
    case 38:
      var value = new proto.pb.remote.ResponseGlobalSearch;
      reader.readMessage(value,proto.pb.remote.ResponseGlobalSearch.deserializeBinaryFromReader);
      msg.setResponseGlobalSearch(value);
      break;
    case 39:
      var value = new proto.pb.remote.ResponseTranscoderStatus;
      reader.readMessage(value,proto.pb.remote.ResponseTranscoderStatus.deserializeBinaryFromReader);
      msg.setResponseTranscoderStatus(value);
      break;
    case 40:
      var value = new proto.pb.remote.ResponseGlobalSearchStatus;
      reader.readMessage(value,proto.pb.remote.ResponseGlobalSearchStatus.deserializeBinaryFromReader);
      msg.setResponseGlobalSearchStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.remote.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.remote.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.remote.Message} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.remote.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.pb.remote.MsgType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRequestConnect();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.pb.remote.RequestConnect.serializeBinaryToWriter
    );
  }
  f = message.getRequestPlaylists();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.pb.remote.RequestPlaylists.serializeBinaryToWriter
    );
  }
  f = message.getRequestPlaylistSongs();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.pb.remote.RequestPlaylistSongs.serializeBinaryToWriter
    );
  }
  f = message.getRequestChangeSong();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.pb.remote.RequestChangeSong.serializeBinaryToWriter
    );
  }
  f = message.getRequestSetVolume();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.pb.remote.RequestSetVolume.serializeBinaryToWriter
    );
  }
  f = message.getRequestSetTrackPosition();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.pb.remote.RequestSetTrackPosition.serializeBinaryToWriter
    );
  }
  f = message.getRequestInsertUrls();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.pb.remote.RequestInsertUrls.serializeBinaryToWriter
    );
  }
  f = message.getRequestRemoveSongs();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.pb.remote.RequestRemoveSongs.serializeBinaryToWriter
    );
  }
  f = message.getRequestOpenPlaylist();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.pb.remote.RequestOpenPlaylist.serializeBinaryToWriter
    );
  }
  f = message.getRequestClosePlaylist();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.pb.remote.RequestClosePlaylist.serializeBinaryToWriter
    );
  }
  f = message.getRequestDownloadSongs();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.pb.remote.RequestDownloadSongs.serializeBinaryToWriter
    );
  }
  f = message.getRequestRateSong();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.pb.remote.RequestRateSong.serializeBinaryToWriter
    );
  }
  f = message.getRequestGlobalSearch();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.pb.remote.RequestGlobalSearch.serializeBinaryToWriter
    );
  }
  f = message.getRepeat();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.pb.remote.Repeat.serializeBinaryToWriter
    );
  }
  f = message.getShuffle();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.pb.remote.Shuffle.serializeBinaryToWriter
    );
  }
  f = message.getResponseClementineInfo();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.pb.remote.ResponseClementineInfo.serializeBinaryToWriter
    );
  }
  f = message.getResponseCurrentMetadata();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.pb.remote.ResponseCurrentMetadata.serializeBinaryToWriter
    );
  }
  f = message.getResponsePlaylists();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.pb.remote.ResponsePlaylists.serializeBinaryToWriter
    );
  }
  f = message.getResponsePlaylistSongs();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.pb.remote.ResponsePlaylistSongs.serializeBinaryToWriter
    );
  }
  f = message.getResponseEngineStateChanged();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.pb.remote.ResponseEngineStateChanged.serializeBinaryToWriter
    );
  }
  f = message.getResponseUpdateTrackPosition();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.pb.remote.ResponseUpdateTrackPosition.serializeBinaryToWriter
    );
  }
  f = message.getResponseDisconnect();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.pb.remote.ResponseDisconnect.serializeBinaryToWriter
    );
  }
  f = message.getResponseActiveChanged();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.pb.remote.ResponseActiveChanged.serializeBinaryToWriter
    );
  }
  f = message.getResponseLyrics();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.pb.remote.ResponseLyrics.serializeBinaryToWriter
    );
  }
  f = message.getResponseSongFileChunk();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.pb.remote.ResponseSongFileChunk.serializeBinaryToWriter
    );
  }
  f = message.getResponseSongOffer();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.pb.remote.ResponseSongOffer.serializeBinaryToWriter
    );
  }
  f = message.getResponseLibraryChunk();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.pb.remote.ResponseLibraryChunk.serializeBinaryToWriter
    );
  }
  f = message.getResponseDownloadTotalSize();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.pb.remote.ResponseDownloadTotalSize.serializeBinaryToWriter
    );
  }
  f = message.getResponseGlobalSearch();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.pb.remote.ResponseGlobalSearch.serializeBinaryToWriter
    );
  }
  f = message.getResponseTranscoderStatus();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.pb.remote.ResponseTranscoderStatus.serializeBinaryToWriter
    );
  }
  f = message.getResponseGlobalSearchStatus();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.pb.remote.ResponseGlobalSearchStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.pb.remote.Message.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 21));
};


/** @param {number} value */
proto.pb.remote.Message.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.remote.Message.prototype.clearVersion = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MsgType type = 2;
 * @return {!proto.pb.remote.MsgType}
 */
proto.pb.remote.Message.prototype.getType = function() {
  return /** @type {!proto.pb.remote.MsgType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.pb.remote.MsgType} value */
proto.pb.remote.Message.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.remote.Message.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestConnect request_connect = 21;
 * @return {?proto.pb.remote.RequestConnect}
 */
proto.pb.remote.Message.prototype.getRequestConnect = function() {
  return /** @type{?proto.pb.remote.RequestConnect} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestConnect, 21));
};


/** @param {?proto.pb.remote.RequestConnect|undefined} value */
proto.pb.remote.Message.prototype.setRequestConnect = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.pb.remote.Message.prototype.clearRequestConnect = function() {
  this.setRequestConnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestConnect = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional RequestPlaylists request_playlists = 27;
 * @return {?proto.pb.remote.RequestPlaylists}
 */
proto.pb.remote.Message.prototype.getRequestPlaylists = function() {
  return /** @type{?proto.pb.remote.RequestPlaylists} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestPlaylists, 27));
};


/** @param {?proto.pb.remote.RequestPlaylists|undefined} value */
proto.pb.remote.Message.prototype.setRequestPlaylists = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.pb.remote.Message.prototype.clearRequestPlaylists = function() {
  this.setRequestPlaylists(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestPlaylists = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional RequestPlaylistSongs request_playlist_songs = 10;
 * @return {?proto.pb.remote.RequestPlaylistSongs}
 */
proto.pb.remote.Message.prototype.getRequestPlaylistSongs = function() {
  return /** @type{?proto.pb.remote.RequestPlaylistSongs} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestPlaylistSongs, 10));
};


/** @param {?proto.pb.remote.RequestPlaylistSongs|undefined} value */
proto.pb.remote.Message.prototype.setRequestPlaylistSongs = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.pb.remote.Message.prototype.clearRequestPlaylistSongs = function() {
  this.setRequestPlaylistSongs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestPlaylistSongs = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RequestChangeSong request_change_song = 11;
 * @return {?proto.pb.remote.RequestChangeSong}
 */
proto.pb.remote.Message.prototype.getRequestChangeSong = function() {
  return /** @type{?proto.pb.remote.RequestChangeSong} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestChangeSong, 11));
};


/** @param {?proto.pb.remote.RequestChangeSong|undefined} value */
proto.pb.remote.Message.prototype.setRequestChangeSong = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.pb.remote.Message.prototype.clearRequestChangeSong = function() {
  this.setRequestChangeSong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestChangeSong = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RequestSetVolume request_set_volume = 12;
 * @return {?proto.pb.remote.RequestSetVolume}
 */
proto.pb.remote.Message.prototype.getRequestSetVolume = function() {
  return /** @type{?proto.pb.remote.RequestSetVolume} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestSetVolume, 12));
};


/** @param {?proto.pb.remote.RequestSetVolume|undefined} value */
proto.pb.remote.Message.prototype.setRequestSetVolume = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.pb.remote.Message.prototype.clearRequestSetVolume = function() {
  this.setRequestSetVolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestSetVolume = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RequestSetTrackPosition request_set_track_position = 23;
 * @return {?proto.pb.remote.RequestSetTrackPosition}
 */
proto.pb.remote.Message.prototype.getRequestSetTrackPosition = function() {
  return /** @type{?proto.pb.remote.RequestSetTrackPosition} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestSetTrackPosition, 23));
};


/** @param {?proto.pb.remote.RequestSetTrackPosition|undefined} value */
proto.pb.remote.Message.prototype.setRequestSetTrackPosition = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.pb.remote.Message.prototype.clearRequestSetTrackPosition = function() {
  this.setRequestSetTrackPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestSetTrackPosition = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional RequestInsertUrls request_insert_urls = 25;
 * @return {?proto.pb.remote.RequestInsertUrls}
 */
proto.pb.remote.Message.prototype.getRequestInsertUrls = function() {
  return /** @type{?proto.pb.remote.RequestInsertUrls} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestInsertUrls, 25));
};


/** @param {?proto.pb.remote.RequestInsertUrls|undefined} value */
proto.pb.remote.Message.prototype.setRequestInsertUrls = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.pb.remote.Message.prototype.clearRequestInsertUrls = function() {
  this.setRequestInsertUrls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestInsertUrls = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional RequestRemoveSongs request_remove_songs = 26;
 * @return {?proto.pb.remote.RequestRemoveSongs}
 */
proto.pb.remote.Message.prototype.getRequestRemoveSongs = function() {
  return /** @type{?proto.pb.remote.RequestRemoveSongs} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestRemoveSongs, 26));
};


/** @param {?proto.pb.remote.RequestRemoveSongs|undefined} value */
proto.pb.remote.Message.prototype.setRequestRemoveSongs = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.pb.remote.Message.prototype.clearRequestRemoveSongs = function() {
  this.setRequestRemoveSongs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestRemoveSongs = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional RequestOpenPlaylist request_open_playlist = 28;
 * @return {?proto.pb.remote.RequestOpenPlaylist}
 */
proto.pb.remote.Message.prototype.getRequestOpenPlaylist = function() {
  return /** @type{?proto.pb.remote.RequestOpenPlaylist} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestOpenPlaylist, 28));
};


/** @param {?proto.pb.remote.RequestOpenPlaylist|undefined} value */
proto.pb.remote.Message.prototype.setRequestOpenPlaylist = function(value) {
  jspb.Message.setWrapperField(this, 28, value);
};


proto.pb.remote.Message.prototype.clearRequestOpenPlaylist = function() {
  this.setRequestOpenPlaylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestOpenPlaylist = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional RequestClosePlaylist request_close_playlist = 29;
 * @return {?proto.pb.remote.RequestClosePlaylist}
 */
proto.pb.remote.Message.prototype.getRequestClosePlaylist = function() {
  return /** @type{?proto.pb.remote.RequestClosePlaylist} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestClosePlaylist, 29));
};


/** @param {?proto.pb.remote.RequestClosePlaylist|undefined} value */
proto.pb.remote.Message.prototype.setRequestClosePlaylist = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.pb.remote.Message.prototype.clearRequestClosePlaylist = function() {
  this.setRequestClosePlaylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestClosePlaylist = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional RequestDownloadSongs request_download_songs = 31;
 * @return {?proto.pb.remote.RequestDownloadSongs}
 */
proto.pb.remote.Message.prototype.getRequestDownloadSongs = function() {
  return /** @type{?proto.pb.remote.RequestDownloadSongs} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestDownloadSongs, 31));
};


/** @param {?proto.pb.remote.RequestDownloadSongs|undefined} value */
proto.pb.remote.Message.prototype.setRequestDownloadSongs = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.pb.remote.Message.prototype.clearRequestDownloadSongs = function() {
  this.setRequestDownloadSongs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestDownloadSongs = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional RequestRateSong request_rate_song = 35;
 * @return {?proto.pb.remote.RequestRateSong}
 */
proto.pb.remote.Message.prototype.getRequestRateSong = function() {
  return /** @type{?proto.pb.remote.RequestRateSong} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestRateSong, 35));
};


/** @param {?proto.pb.remote.RequestRateSong|undefined} value */
proto.pb.remote.Message.prototype.setRequestRateSong = function(value) {
  jspb.Message.setWrapperField(this, 35, value);
};


proto.pb.remote.Message.prototype.clearRequestRateSong = function() {
  this.setRequestRateSong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestRateSong = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional RequestGlobalSearch request_global_search = 37;
 * @return {?proto.pb.remote.RequestGlobalSearch}
 */
proto.pb.remote.Message.prototype.getRequestGlobalSearch = function() {
  return /** @type{?proto.pb.remote.RequestGlobalSearch} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.RequestGlobalSearch, 37));
};


/** @param {?proto.pb.remote.RequestGlobalSearch|undefined} value */
proto.pb.remote.Message.prototype.setRequestGlobalSearch = function(value) {
  jspb.Message.setWrapperField(this, 37, value);
};


proto.pb.remote.Message.prototype.clearRequestGlobalSearch = function() {
  this.setRequestGlobalSearch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRequestGlobalSearch = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional Repeat repeat = 13;
 * @return {?proto.pb.remote.Repeat}
 */
proto.pb.remote.Message.prototype.getRepeat = function() {
  return /** @type{?proto.pb.remote.Repeat} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.Repeat, 13));
};


/** @param {?proto.pb.remote.Repeat|undefined} value */
proto.pb.remote.Message.prototype.setRepeat = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.pb.remote.Message.prototype.clearRepeat = function() {
  this.setRepeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasRepeat = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Shuffle shuffle = 14;
 * @return {?proto.pb.remote.Shuffle}
 */
proto.pb.remote.Message.prototype.getShuffle = function() {
  return /** @type{?proto.pb.remote.Shuffle} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.Shuffle, 14));
};


/** @param {?proto.pb.remote.Shuffle|undefined} value */
proto.pb.remote.Message.prototype.setShuffle = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.pb.remote.Message.prototype.clearShuffle = function() {
  this.setShuffle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasShuffle = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ResponseClementineInfo response_clementine_info = 15;
 * @return {?proto.pb.remote.ResponseClementineInfo}
 */
proto.pb.remote.Message.prototype.getResponseClementineInfo = function() {
  return /** @type{?proto.pb.remote.ResponseClementineInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseClementineInfo, 15));
};


/** @param {?proto.pb.remote.ResponseClementineInfo|undefined} value */
proto.pb.remote.Message.prototype.setResponseClementineInfo = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.pb.remote.Message.prototype.clearResponseClementineInfo = function() {
  this.setResponseClementineInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseClementineInfo = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ResponseCurrentMetadata response_current_metadata = 16;
 * @return {?proto.pb.remote.ResponseCurrentMetadata}
 */
proto.pb.remote.Message.prototype.getResponseCurrentMetadata = function() {
  return /** @type{?proto.pb.remote.ResponseCurrentMetadata} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseCurrentMetadata, 16));
};


/** @param {?proto.pb.remote.ResponseCurrentMetadata|undefined} value */
proto.pb.remote.Message.prototype.setResponseCurrentMetadata = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.pb.remote.Message.prototype.clearResponseCurrentMetadata = function() {
  this.setResponseCurrentMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseCurrentMetadata = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ResponsePlaylists response_playlists = 17;
 * @return {?proto.pb.remote.ResponsePlaylists}
 */
proto.pb.remote.Message.prototype.getResponsePlaylists = function() {
  return /** @type{?proto.pb.remote.ResponsePlaylists} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponsePlaylists, 17));
};


/** @param {?proto.pb.remote.ResponsePlaylists|undefined} value */
proto.pb.remote.Message.prototype.setResponsePlaylists = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.pb.remote.Message.prototype.clearResponsePlaylists = function() {
  this.setResponsePlaylists(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponsePlaylists = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ResponsePlaylistSongs response_playlist_songs = 18;
 * @return {?proto.pb.remote.ResponsePlaylistSongs}
 */
proto.pb.remote.Message.prototype.getResponsePlaylistSongs = function() {
  return /** @type{?proto.pb.remote.ResponsePlaylistSongs} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponsePlaylistSongs, 18));
};


/** @param {?proto.pb.remote.ResponsePlaylistSongs|undefined} value */
proto.pb.remote.Message.prototype.setResponsePlaylistSongs = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.pb.remote.Message.prototype.clearResponsePlaylistSongs = function() {
  this.setResponsePlaylistSongs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponsePlaylistSongs = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ResponseEngineStateChanged response_engine_state_changed = 19;
 * @return {?proto.pb.remote.ResponseEngineStateChanged}
 */
proto.pb.remote.Message.prototype.getResponseEngineStateChanged = function() {
  return /** @type{?proto.pb.remote.ResponseEngineStateChanged} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseEngineStateChanged, 19));
};


/** @param {?proto.pb.remote.ResponseEngineStateChanged|undefined} value */
proto.pb.remote.Message.prototype.setResponseEngineStateChanged = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.pb.remote.Message.prototype.clearResponseEngineStateChanged = function() {
  this.setResponseEngineStateChanged(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseEngineStateChanged = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional ResponseUpdateTrackPosition response_update_track_position = 20;
 * @return {?proto.pb.remote.ResponseUpdateTrackPosition}
 */
proto.pb.remote.Message.prototype.getResponseUpdateTrackPosition = function() {
  return /** @type{?proto.pb.remote.ResponseUpdateTrackPosition} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseUpdateTrackPosition, 20));
};


/** @param {?proto.pb.remote.ResponseUpdateTrackPosition|undefined} value */
proto.pb.remote.Message.prototype.setResponseUpdateTrackPosition = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.pb.remote.Message.prototype.clearResponseUpdateTrackPosition = function() {
  this.setResponseUpdateTrackPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseUpdateTrackPosition = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ResponseDisconnect response_disconnect = 22;
 * @return {?proto.pb.remote.ResponseDisconnect}
 */
proto.pb.remote.Message.prototype.getResponseDisconnect = function() {
  return /** @type{?proto.pb.remote.ResponseDisconnect} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseDisconnect, 22));
};


/** @param {?proto.pb.remote.ResponseDisconnect|undefined} value */
proto.pb.remote.Message.prototype.setResponseDisconnect = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.pb.remote.Message.prototype.clearResponseDisconnect = function() {
  this.setResponseDisconnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseDisconnect = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional ResponseActiveChanged response_active_changed = 24;
 * @return {?proto.pb.remote.ResponseActiveChanged}
 */
proto.pb.remote.Message.prototype.getResponseActiveChanged = function() {
  return /** @type{?proto.pb.remote.ResponseActiveChanged} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseActiveChanged, 24));
};


/** @param {?proto.pb.remote.ResponseActiveChanged|undefined} value */
proto.pb.remote.Message.prototype.setResponseActiveChanged = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.pb.remote.Message.prototype.clearResponseActiveChanged = function() {
  this.setResponseActiveChanged(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseActiveChanged = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional ResponseLyrics response_lyrics = 30;
 * @return {?proto.pb.remote.ResponseLyrics}
 */
proto.pb.remote.Message.prototype.getResponseLyrics = function() {
  return /** @type{?proto.pb.remote.ResponseLyrics} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseLyrics, 30));
};


/** @param {?proto.pb.remote.ResponseLyrics|undefined} value */
proto.pb.remote.Message.prototype.setResponseLyrics = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.pb.remote.Message.prototype.clearResponseLyrics = function() {
  this.setResponseLyrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseLyrics = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional ResponseSongFileChunk response_song_file_chunk = 32;
 * @return {?proto.pb.remote.ResponseSongFileChunk}
 */
proto.pb.remote.Message.prototype.getResponseSongFileChunk = function() {
  return /** @type{?proto.pb.remote.ResponseSongFileChunk} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseSongFileChunk, 32));
};


/** @param {?proto.pb.remote.ResponseSongFileChunk|undefined} value */
proto.pb.remote.Message.prototype.setResponseSongFileChunk = function(value) {
  jspb.Message.setWrapperField(this, 32, value);
};


proto.pb.remote.Message.prototype.clearResponseSongFileChunk = function() {
  this.setResponseSongFileChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseSongFileChunk = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional ResponseSongOffer response_song_offer = 33;
 * @return {?proto.pb.remote.ResponseSongOffer}
 */
proto.pb.remote.Message.prototype.getResponseSongOffer = function() {
  return /** @type{?proto.pb.remote.ResponseSongOffer} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseSongOffer, 33));
};


/** @param {?proto.pb.remote.ResponseSongOffer|undefined} value */
proto.pb.remote.Message.prototype.setResponseSongOffer = function(value) {
  jspb.Message.setWrapperField(this, 33, value);
};


proto.pb.remote.Message.prototype.clearResponseSongOffer = function() {
  this.setResponseSongOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseSongOffer = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional ResponseLibraryChunk response_library_chunk = 34;
 * @return {?proto.pb.remote.ResponseLibraryChunk}
 */
proto.pb.remote.Message.prototype.getResponseLibraryChunk = function() {
  return /** @type{?proto.pb.remote.ResponseLibraryChunk} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseLibraryChunk, 34));
};


/** @param {?proto.pb.remote.ResponseLibraryChunk|undefined} value */
proto.pb.remote.Message.prototype.setResponseLibraryChunk = function(value) {
  jspb.Message.setWrapperField(this, 34, value);
};


proto.pb.remote.Message.prototype.clearResponseLibraryChunk = function() {
  this.setResponseLibraryChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseLibraryChunk = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional ResponseDownloadTotalSize response_download_total_size = 36;
 * @return {?proto.pb.remote.ResponseDownloadTotalSize}
 */
proto.pb.remote.Message.prototype.getResponseDownloadTotalSize = function() {
  return /** @type{?proto.pb.remote.ResponseDownloadTotalSize} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseDownloadTotalSize, 36));
};


/** @param {?proto.pb.remote.ResponseDownloadTotalSize|undefined} value */
proto.pb.remote.Message.prototype.setResponseDownloadTotalSize = function(value) {
  jspb.Message.setWrapperField(this, 36, value);
};


proto.pb.remote.Message.prototype.clearResponseDownloadTotalSize = function() {
  this.setResponseDownloadTotalSize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseDownloadTotalSize = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional ResponseGlobalSearch response_global_search = 38;
 * @return {?proto.pb.remote.ResponseGlobalSearch}
 */
proto.pb.remote.Message.prototype.getResponseGlobalSearch = function() {
  return /** @type{?proto.pb.remote.ResponseGlobalSearch} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseGlobalSearch, 38));
};


/** @param {?proto.pb.remote.ResponseGlobalSearch|undefined} value */
proto.pb.remote.Message.prototype.setResponseGlobalSearch = function(value) {
  jspb.Message.setWrapperField(this, 38, value);
};


proto.pb.remote.Message.prototype.clearResponseGlobalSearch = function() {
  this.setResponseGlobalSearch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseGlobalSearch = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional ResponseTranscoderStatus response_transcoder_status = 39;
 * @return {?proto.pb.remote.ResponseTranscoderStatus}
 */
proto.pb.remote.Message.prototype.getResponseTranscoderStatus = function() {
  return /** @type{?proto.pb.remote.ResponseTranscoderStatus} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseTranscoderStatus, 39));
};


/** @param {?proto.pb.remote.ResponseTranscoderStatus|undefined} value */
proto.pb.remote.Message.prototype.setResponseTranscoderStatus = function(value) {
  jspb.Message.setWrapperField(this, 39, value);
};


proto.pb.remote.Message.prototype.clearResponseTranscoderStatus = function() {
  this.setResponseTranscoderStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseTranscoderStatus = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional ResponseGlobalSearchStatus response_global_search_status = 40;
 * @return {?proto.pb.remote.ResponseGlobalSearchStatus}
 */
proto.pb.remote.Message.prototype.getResponseGlobalSearchStatus = function() {
  return /** @type{?proto.pb.remote.ResponseGlobalSearchStatus} */ (
    jspb.Message.getWrapperField(this, proto.pb.remote.ResponseGlobalSearchStatus, 40));
};


/** @param {?proto.pb.remote.ResponseGlobalSearchStatus|undefined} value */
proto.pb.remote.Message.prototype.setResponseGlobalSearchStatus = function(value) {
  jspb.Message.setWrapperField(this, 40, value);
};


proto.pb.remote.Message.prototype.clearResponseGlobalSearchStatus = function() {
  this.setResponseGlobalSearchStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.remote.Message.prototype.hasResponseGlobalSearchStatus = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * @enum {number}
 */
proto.pb.remote.MsgType = {
  UNKNOWN: 0,
  CONNECT: 1,
  REQUEST_PLAYLISTS: 3,
  REQUEST_PLAYLIST_SONGS: 4,
  CHANGE_SONG: 5,
  SET_VOLUME: 6,
  SET_TRACK_POSITION: 7,
  INSERT_URLS: 8,
  REMOVE_SONGS: 9,
  OPEN_PLAYLIST: 10,
  CLOSE_PLAYLIST: 11,
  GET_LYRICS: 14,
  DOWNLOAD_SONGS: 15,
  SONG_OFFER_RESPONSE: 16,
  LOVE: 12,
  BAN: 13,
  STOP_AFTER: 17,
  GET_LIBRARY: 18,
  RATE_SONG: 19,
  GLOBAL_SEARCH: 100,
  DISCONNECT: 2,
  PLAY: 20,
  PLAYPAUSE: 21,
  PAUSE: 22,
  STOP: 23,
  NEXT: 24,
  PREVIOUS: 25,
  SHUFFLE_PLAYLIST: 26,
  REPEAT: 27,
  SHUFFLE: 28,
  INFO: 40,
  CURRENT_METAINFO: 41,
  PLAYLISTS: 42,
  PLAYLIST_SONGS: 43,
  ENGINE_STATE_CHANGED: 44,
  KEEP_ALIVE: 45,
  UPDATE_TRACK_POSITION: 46,
  ACTIVE_PLAYLIST_CHANGED: 47,
  FIRST_DATA_SENT_COMPLETE: 48,
  LYRICS: 49,
  SONG_FILE_CHUNK: 50,
  DOWNLOAD_QUEUE_EMPTY: 51,
  LIBRARY_CHUNK: 52,
  DOWNLOAD_TOTAL_SIZE: 53,
  GLOBAL_SEARCH_RESULT: 54,
  TRANSCODING_FILES: 55,
  GLOBAL_SEARCH_STATUS: 56
};

/**
 * @enum {number}
 */
proto.pb.remote.EngineState = {
  EMPTY: 0,
  IDLE: 1,
  PLAYING: 2,
  PAUSED: 3
};

/**
 * @enum {number}
 */
proto.pb.remote.RepeatMode = {
  REPEAT_OFF: 0,
  REPEAT_TRACK: 1,
  REPEAT_ALBUM: 2,
  REPEAT_PLAYLIST: 3
};

/**
 * @enum {number}
 */
proto.pb.remote.ShuffleMode = {
  SHUFFLE_OFF: 0,
  SHUFFLE_ALL: 1,
  SHUFFLE_INSIDEALBUM: 2,
  SHUFFLE_ALBUMS: 3
};

/**
 * @enum {number}
 */
proto.pb.remote.ReasonDisconnect = {
  SERVER_SHUTDOWN: 1,
  WRONG_AUTH_CODE: 2,
  NOT_AUTHENTICATED: 3,
  DOWNLOAD_FORBIDDEN: 4
};

/**
 * @enum {number}
 */
proto.pb.remote.DownloadItem = {
  CURRENTITEM: 1,
  ITEMALBUM: 2,
  APLAYLIST: 3,
  URLS: 4
};

/**
 * @enum {number}
 */
proto.pb.remote.GlobalSearchStatus = {
  GLOBALSEARCHSTARTED: 1,
  GLOBALSEARCHFINISHED: 2
};

goog.object.extend(exports, proto.pb.remote);
